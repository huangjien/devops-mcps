name: Release Package and Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Get package version
      id: get-version
      run: |
        # Verify Python environment and re module
        python -c "import re; print('re module available')"
        # Extract version from pyproject.toml
        echo "version=$(python -c "import re; print(re.search(r'version\s*=\s*[\'\"]([^\'\"]+)[\'\"]', open('pyproject.toml').read()).group(1))" | tr -d '\n')" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine uv
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run tests
      run: .venv/bin/pytest --cov=src/devops_mcps --cov-report=xml

    - name: Build package
      run: python -m build

    - name: Create and push git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag v${{ steps.get-version.outputs.version }}
        git push origin v${{ steps.get-version.outputs.version }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        release_name: Release v${{ steps.get-version.outputs.version }}
        body: |
          ### Changes
          - Package version ${{ steps.get-version.outputs.version }} published to PyPI
          - Docker image ${{ steps.get-version.outputs.version }} pushed to Docker Hub
        draft: false
        prerelease: false

    # - name: Upload Python Package to GitHub Release
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./dist/*.whl
    #     asset_name: devops-mcps-${{ steps.get-version.outputs.version }}-py3-none-any.whl
    #     asset_content_type: application/zip

    # - name: Upload Source Package to GitHub Release
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./dist/*.tar.gz
    #     asset_name: devops-mcps-${{ steps.get-version.outputs.version }}.tar.gz
    #     asset_content_type: application/gzip

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: huangjien
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          huangjien/devops-mcps:latest
          huangjien/devops-mcps:${{ steps.get-version.outputs.version }}
