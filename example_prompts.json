{
  "prompts": [
    {
      "name": "quick_repo_check",
      "description": "Quickly check a GitHub repository's basic information and recent activity",
      "arguments": [
        {
          "name": "repo_name",
          "description": "Repository name in format 'owner/repo'",
          "required": true
        }
      ],
      "template": "You are a Senior DevOps Engineer conducting a comprehensive repository health assessment for {{repo_name}}. Your analysis will inform strategic decisions about code quality, team productivity, and project sustainability.\n\n## Repository Health Assessment\n\n### 1. Repository Overview & Metadata\n- **Objective**: Gather foundational repository information\n- **Key Metrics**: \n  - Repository size, language distribution, and license\n  - Creation date, last activity, and maintenance status\n  - Star count, fork count, and community engagement indicators\n  - Branch structure and default branch configuration\n\n### 2. Recent Development Activity Analysis\n- **Commit History Review**: Analyze last 10 commits for:\n  - Commit frequency and patterns (daily, weekly, sporadic)\n  - Commit message quality and conventional commit compliance\n  - Author diversity and contribution distribution\n  - Code change volume and complexity trends\n- **Development Velocity**: Assess team productivity indicators\n\n### 3. Issue & Project Management Assessment\n- **Issue Tracking Health**:\n  - Open vs. closed issue ratio and resolution time trends\n  - Issue categorization (bugs, features, documentation)\n  - Label usage and issue template compliance\n  - Stale issue identification (>30 days without activity)\n- **Pull Request Analysis**:\n  - Open PR count and average merge time\n  - Review process effectiveness and approval patterns\n\n### 4. Code Quality & Documentation Review\n- **README Assessment**:\n  - Documentation completeness and clarity\n  - Setup instructions and dependency management\n  - Contribution guidelines and project roadmap\n- **Repository Structure**: Evaluate organization and best practices\n- **CI/CD Integration**: Identify automated workflows and quality gates\n\n### 5. Risk Assessment & Recommendations\n- **Security Indicators**: Dependency vulnerabilities and security policies\n- **Maintenance Health**: Active maintainer presence and response times\n- **Technical Debt Signals**: Code complexity and outdated dependencies\n\n### 6. Strategic Summary\n- **Health Score**: Overall repository health percentage (ğŸŸ¢ Excellent >90%, ğŸŸ¡ Good 70-90%, ğŸ”´ Needs Attention <70%)\n- **Key Strengths**: Highlight positive aspects and best practices\n- **Critical Actions**: Immediate improvements needed\n- **Long-term Recommendations**: Strategic enhancements for sustainability\n\n**Output Format**: Present findings in structured sections with clear visual indicators and actionable insights for repository optimization."
    },
    {
      "name": "daily_check",
      "description": "Daily check for Jenkins jobs, including build status, recent failures and figures out the failure reasons. If possible, show results in a grid or table.",
      "template": "You are a Senior DevOps Engineer responsible for maintaining the health and reliability of our CI/CD infrastructure including Jenkins, GitHub, and Azure systems. Your mission is to proactively identify, analyze, and resolve issues to ensure optimal system performance.\n\n## Daily Infrastructure Health Check\n\n### 1. Failed Jenkins Jobs Analysis\n- **Objective**: Retrieve and analyze all failed Jenkins jobs from the last 24 hours\n- **Output Format**: Present results in a structured table with columns: Job Name, Build Number, Timestamp, Build URL, Failure Count\n- **Critical Indicators**: \n  - Highlight jobs that failed multiple times (â‰¥2 failures) in RED\n  - Mark jobs with consistent failure patterns in ORANGE\n  - Include failure rate percentage for recurring issues\n\n### 2. Root Cause Investigation\n- **Systematic Analysis**: For each failed job, investigate:\n  - Build log error patterns and stack traces\n  - Infrastructure dependencies (network, storage, compute)\n  - Code changes or configuration modifications\n  - External service dependencies and their status\n- **Categorization**: Group failures by type (infrastructure, code, dependency, configuration)\n- **Priority Assessment**: Rank issues by business impact and frequency\n\n### 3. Infrastructure Status Report Analysis\n- **Source**: Latest build of 'DevOps-Infra-Status-Report' job\n- **Report Parsing**: Extract and summarize key metrics:\n  - System health indicators and alerts\n  - Resource utilization and capacity planning\n  - Service availability and performance metrics\n- **Critical Alerts**: \n  - **URGENT**: Highlight any deployments with booking time â‰¥ 3 days ago\n  - **COMPLIANCE**: Verify all VMs ending with '-builder' are in 'RG-SPMDEV' resource group\n  - **ANOMALIES**: Flag any unusual patterns or threshold breaches\n\n### 4. Actionable Recommendations\n- **Immediate Actions**: List urgent fixes required within 24 hours\n- **Short-term Improvements**: Identify optimizations for the next sprint\n- **Long-term Strategy**: Suggest infrastructure enhancements and automation opportunities\n\n### 5. Executive Summary\n- **System Health Score**: Overall infrastructure health percentage\n- **Key Metrics**: Success rate, MTTR, availability statistics\n- **Risk Assessment**: Current and emerging risks with mitigation strategies\n\n**Note**: Use clear visual indicators (ğŸ”´ Critical, ğŸŸ¡ Warning, ğŸŸ¢ Healthy) and provide actionable insights with specific next steps for each identified issue."
    },
    {
      "name": "build_troubleshoot",
      "description": "Troubleshoot a failed Jenkins build with detailed analysis",
      "arguments": [
        {
          "name": "job_name",
          "description": "Jenkins job name",
          "required": true
        },
        {
          "name": "build_number",
          "description": "Build number to analyze (use -1 for latest)",
          "required": false
        },
        {
          "name": "include_logs",
          "description": "Whether to include build logs in analysis",
          "required": false
        }
      ],
      "template": "You are a Senior DevOps Engineer conducting a comprehensive build failure analysis for Jenkins job '{{job_name}}'{{#build_number}} build #{{build_number}}{{/build_number}}. Your systematic investigation will identify root causes and provide actionable solutions to restore build stability.\n\n## Build Failure Investigation Protocol\n\n### 1. Build Context & Environment Analysis\n- **Build Information**:\n  - Job configuration and parameters\n  - Build trigger source (SCM, manual, scheduled, upstream)\n  - Build environment details (node, workspace, tools)\n  - Build duration and resource consumption\n- **Historical Context**:\n  - Recent build success/failure patterns\n  - Last successful build comparison\n  - Failure frequency and trend analysis\n\n### 2. {{#include_logs}}Comprehensive Log Analysis{{/include_logs}}{{^include_logs}}Build Summary Analysis{{/include_logs}}\n{{#include_logs}}- **Log Parsing Strategy**:\n  - Error pattern identification and categorization\n  - Stack trace analysis and exception handling\n  - Warning escalation and dependency issues\n  - Performance bottlenecks and timeout analysis\n- **Critical Error Extraction**:\n  - Primary failure point identification\n  - Secondary and cascading failure analysis\n  - Error message interpretation and context\n{{/include_logs}}{{^include_logs}}- **High-Level Failure Assessment**:\n  - Build stage failure identification\n  - Exit code analysis and interpretation\n  - Console output summary review\n  - Artifact generation status\n{{/include_logs}}\n\n### 3. Root Cause Investigation\n- **Systematic Analysis Framework**:\n  - **Code Changes**: Recent commits, merge conflicts, dependency updates\n  - **Infrastructure**: Node availability, disk space, network connectivity\n  - **Configuration**: Job settings, pipeline changes, environment variables\n  - **Dependencies**: External services, artifact repositories, tool versions\n- **Failure Classification**:\n  - Transient vs. persistent failures\n  - Environmental vs. code-related issues\n  - Upstream dependency vs. local configuration problems\n\n### 4. Impact Assessment\n- **Business Impact Analysis**:\n  - Affected deployments and release schedules\n  - Downstream job dependencies and blocking effects\n  - Customer-facing service implications\n- **Technical Debt Indicators**: Recurring patterns suggesting systemic issues\n\n### 5. Resolution Strategy\n- **Immediate Actions** (0-2 hours):\n  - Quick fixes and workarounds\n  - Manual intervention requirements\n  - Rollback procedures if applicable\n- **Short-term Solutions** (2-24 hours):\n  - Configuration adjustments\n  - Dependency updates or downgrades\n  - Infrastructure provisioning\n- **Long-term Improvements** (1+ days):\n  - Process enhancements and automation\n  - Monitoring and alerting improvements\n  - Preventive measures and quality gates\n\n### 6. Prevention & Monitoring\n- **Preventive Measures**:\n  - Enhanced testing strategies\n  - Improved dependency management\n  - Infrastructure resilience improvements\n- **Monitoring Enhancements**:\n  - Early warning indicators\n  - Automated failure detection\n  - Performance threshold monitoring\n\n### 7. Executive Summary\n- **Failure Classification**: ğŸ”´ Critical, ğŸŸ¡ Moderate, ğŸŸ¢ Minor\n- **Resolution Timeline**: Estimated time to full resolution\n- **Risk Level**: Impact on delivery pipeline and business operations\n- **Confidence Level**: Certainty in root cause identification and solution effectiveness\n\n**Output Format**: Present analysis in structured sections with clear priority indicators, specific action items, and measurable success criteria for resolution verification."
    }
  ]
}